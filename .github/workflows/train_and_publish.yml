
name: Train the model and publish the Docker image to AWS ECR

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  release-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies for the used car model
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/test_requirements.txt
    
      - name: Format with black
        run: |
          pip install black
          black .

      - name: Lint with pylint
        if: false
        run: |
          pip install pylint
          pylint .

      - name: Train the used car model and create the pkl file
        run: |
          python usedcar_model/train_pipeline.py

    #   - name: Run pytest
    #     run: |
    #       pytest bikeshare_project/tests

      - name: Install the build package and run the build process on the bikeshare model to generate the wheel file
        run: |
          pip install --upgrade build
          python -m build

      - name: Upload wheel file
        uses: actions/upload-artifact@v4
        with:
            name: release-dists
            path: dist/

  ecr-publish:
    runs-on: ubuntu-latest
    needs: release-build
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Download wheel file
        uses: actions/download-artifact@v4
        with:
           name: release-dists  
           path: dist/

      - name: Set the model version as an environment variable
        run: |
          VER=$(cat usedcar_model/VERSION)
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: public.ecr.aws/x9b4p5t6
          ECR_REPOSITORY: ritambanik/ml-api
          IMAGE_TAG: ${{ env.VERSION }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
